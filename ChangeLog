2009-06-23 Dylan R. E. MOonfire <contact@mfgames.com>

	* Restructured the entire assembly into MfGames at the top level
	and pulled out the elements from the Utility namespace.
	* Brought up the code to use generics and 3.5 features.
	* Created an MfGames.Unstable DLL for the code that isn't ready
	for prime time.

2007-10-09 Dylan R. E. Moonfire <contact@mfgames.com>

	* Removed the IEntropy, MersenneEntropy, and related
	functions. Switched the system to use System.Random or derived
	classes and made Entropy a convience static function instead of
	reinventing the random-generation wheel. Created MersenneRandom as
	a proxy link between a System.Random-derived class and
	MersenneTwister.

2007-10-17 Dylan R. E. Moonfire <contact@mfgames.com>

	* Removed the Asset layer stuff, it really isn't used anymore and
	seems to be very fragile. With the plugin interface being removed
	in favor of Mono.Addins, this becomes deprecated.

2007-11-26 Dylan R. E. Moonfire <contact@mfgames.com>

	* Refactoring the tool components to simplify the generation of
	additional tools and simplifying the processing elements.

2007-11-29 Dylan R. E. Moonfire <contact@mfgames.com>

	* MfGames.Utility/Timing: Simplified some of the processing of the
	timing classes and brought it in line more with generic usage.

	* MfGames.Utility/Timing/SecondsCountdown.cs: Added a new class to
	count down time from a given value and fire an event when it
	reaches.

	* MfGames.Utility/Timing/TickArgs.cs: Broke TickArgs out of
	TickManager.cs class to keep with the one class per file
	style. Added a Seconds property to give the rate in seconds as a
	double.

	* MfGames.Utility/Timing/TickManager.cs: Removed the TickHandler
	line and used EventHandler<TickArgs> instead. Broke out TickArgs
	(see above).
